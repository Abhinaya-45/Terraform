Terraform notes:
1) An IAC that is Common. Can be Used with AwS, Azure, Alibaba cloud, GCP anything. So mostly used in hybrid and multicloud environments or if there is a possibility of switching between the cloud providers
2) Terraform Init; Terraform Validate; Terraform plan; Terraform apply;
3) Init initializes based on the provider it gets the Credentials could be Aws or Azure; Validate does Syntax Check; Plan is like a dry run So we don't break the existing environment; Apply is when the actual resources are deployed.
4) There are separate blocks in TF Provisioners blocks Resource block Output block variables block eh. Each of this Can be maintained as a Separate file for easier fixes Similar to microservices.
5) The above also aids in reusability We can provision the same resource with same configuration On multiple sites across regions. All by not hardcoding values but by using variables.
6) terraform.tfstate file:  is an important file that maintains a history of all the maintains a history of all the actions performed to resources.
7) provider.tf: Multi region or Multi cloud or Hybrid provisioning we can reference the Specific provider within the resource block using an alias created within the provider block or file. So each provide has its own alias by which it can be referenced.
8) terraform.tfvars: File specific for storing variables; In a typical use case this would be the only file that needs modification, as per requirement. Ex. We need 2 ec2 created One with rhel other with AIX then all we need to de is Specify the ami id specific for each os and the main.tf Vola 2 new eC2 provisioned and we can get the instance id of these in the output.tf file.
9) output.tf: This is essential file else to get the resource id we would need to login to the console-Also for a large number of resources obtaining the values from console is not efficient. Also on multi Cloud or hybrid even more cumbersome.
10) The state file should be stored on a remote backend such as S3 for all the team members to be able to access it and to be aware of the changes made. Storing the state file locally is not practical.
11) " aws secretsmanager create-secret --name my-database-password --secret-string "YourSecurePassword"  "  This creates the secret to save the values
12) terraform fmt : this looks for .tf files in the current and sub directories and formats them in a proper sequesnce that is readable.
13) Modules are created to enhance reusablity.
14)$(var.variable_name) is how we refrence a variable.


